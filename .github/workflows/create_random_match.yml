name: Advanced Daily Baseball Matches

on:
  schedule:
    - cron: '0 15 * * *' # ÌïúÍµ≠ÏãúÍ∞Ñ ÏûêÏ†ï (UTC+9)
  workflow_dispatch:

jobs:
  send_daily_matches:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate and send today's baseball matches
        run: |
          # ÌïúÍµ≠ÏãúÍ∞Ñ Í∏∞Ï§Ä ÎÇ†Ïßú/ÏãúÍ∞Ñ Ï†ïÎ≥¥
          TODAY=$(TZ='Asia/Seoul' date '+%Y-%m-%d')
          WEEKDAY=$(TZ='Asia/Seoul' date '+%u')  # 1=Ïõî, 7=Ïùº
          MONTH=$(TZ='Asia/Seoul' date '+%m')
          DAY=$(TZ='Asia/Seoul' date '+%d')
          
          echo "üìÖ Date: $TODAY (Weekday: $WEEKDAY)"
          
          # ÌåÄ Î™©Î°ù (KBO Î¶¨Í∑∏)
          teams=("DOOSAN_BEARS" "LG_TWINS" "SSG_LANDERS" "KIA_TIGERS" "NC_DINOS" "SAMSUNG_LIONS" "LOTTE_GIANTS" "KT_WIZ" "HANWHA_EAGLES" "KIWOOM_HEROES")
          get_stadium() {
            case $1 in
              "DOOSAN_BEARS"|"LG_TWINS") echo "JAMSIL" ;;
              "LOTTE_GIANTS") echo "SAJIK" ;;
              "SAMSUNG_LIONS") echo "DAEGU" ;;
              "KIWOOM_HEROES") echo "GOCHUK" ;;
              "HANWHA_EAGLES") echo "DAEJEON" ;;
              "KIA_TIGERS") echo "GWANGJU" ;;
              "KT_WIZ") echo "SUWON" ;;
              "NC_DINOS") echo "CHANGWON" ;;
              "SSG_LANDERS") echo "INCHEON" ;;
              *) echo "JAMSIL" ;;  # Í∏∞Î≥∏Í∞í
            esac
          }
          
          # Ïò§ÎäòÏùò Í≤ΩÍ∏∞ Ïàò Í≤∞Ï†ï
          if [ $WEEKDAY -eq 6 ] || [ $WEEKDAY -eq 7 ]; then
            NUM_MATCHES=$((3 + RANDOM % 3))  # 3-5Í≤ΩÍ∏∞
            MATCH_TIME="14:00:00"  # Ï£ºÎßê Ïò§ÌõÑ
          else
            NUM_MATCHES=$((3 + RANDOM % 3))  # 3-5Í≤ΩÍ∏∞ 
            MATCH_TIME="18:30:00"  # ÌèâÏùº Ï†ÄÎÖÅ
          fi
          
          echo "üèüÔ∏è Generating $NUM_MATCHES matches for today"
          
          # Í≤ΩÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Î∞è Î≥ëÎ†¨ Ï†ÑÏÜ°
          pids=()
          
          for i in $(seq 1 $NUM_MATCHES); do
            # ÎûúÎç§ ÌåÄ ÏÑ†ÌÉù (ÌôàÌåÄÍ≥º ÏõêÏ†ïÌåÄÏù¥ Îã§Î•¥Í≤å)
            HOME_IDX=$((RANDOM % 10))
            AWAY_IDX=$((RANDOM % 10))
            while [ $AWAY_IDX -eq $HOME_IDX ]; do
              AWAY_IDX=$((RANDOM % 10))
            done
            
            HOME_TEAM=${teams[$HOME_IDX]}
            AWAY_TEAM=${teams[$AWAY_IDX]}
            STADIUM=${get_stadium $HOME_TEAM}
            
            echo "Match $i: $HOME_TEAM vs $AWAY_TEAM at $STADIUM ($MATCH_TIME)"
            
            # Î∞±Í∑∏ÎùºÏö¥ÎìúÎ°ú POST ÏöîÏ≤≠
            {
              response=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
                --request POST \
                --url ${{ secrets.API_ENDPOINT }} \
                --header 'Authorization: ${{ secrets.BALLOG_ACCESS_TOKEN }}' \
                --header 'Content-Type: application/json' \
                --data "{
                  \"matchesDate\": \"$TODAY\",
                  \"matchesTime\": \"$MATCH_TIME\",
                  \"homeTeam\": \"$HOME_TEAM\",
                  \"awayTeam\": \"$AWAY_TEAM\",
                  \"stadium\": \"$STADIUM\"
                }")
              
              http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
              if [ $http_code -ge 200 ] && [ $http_code -lt 300 ]; then
                echo "‚úÖ Match sent successfully"
              else
                echo "‚ùå Match failed (HTTP: $http_code)"
              fi
            } &
            
            pids+=($!)
          done
          
          # Î™®Îì† ÏöîÏ≤≠ ÏôÑÎ£å ÎåÄÍ∏∞
          for pid in ${pids[@]}; do
            wait $pid
          done
          
          echo "All $NUM_MATCHES matches for $TODAY have been processed!"
          echo "Completed at $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
